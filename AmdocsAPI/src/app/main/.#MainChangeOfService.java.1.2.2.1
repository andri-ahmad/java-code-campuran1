package app.main;

import util.Lock;
import util.Login;
import util.Parameters;
import util.PrintOutput;
import amdocs.amsp.Configuration;
import app.opr.OprChangeOfServiceTest;

public class MainChangeOfService {
	public static void main(String[] args) {
		Configuration.appName = Configuration.AMSP_API_APP_NAME;

		// variables
		boolean session; // login session flag
		
		boolean APC_lock   = false;
		boolean siteLock   = false;
		boolean acctLock   = false;
		boolean varLock    = false;
		
		// create utility objects
		Lock lock               = new Lock();
		Login login             = new Login();
		Parameters apiParams    = new Parameters();
		PrintOutput printOutput = new PrintOutput();
		
		// initialize utility objects
		printOutput.initOutput(apiParams, printOutput);
		apiParams.initParameters(Parameters.CHANGE_OF_SERVICE, apiParams, printOutput);
		
		// API test objects - create current test objects
		OprChangeOfServiceTest oprChangeOfServiceTest = new OprChangeOfServiceTest();
		
		session = login.logInOut(login.LOGIN(), apiParams, printOutput);
		
		if (session){
			// locking
			APC_lock   = lock.checkAPC_lock(apiParams, login, printOutput);
			acctLock   = lock.lockIt(lock.LOCK(), lock.ACCOUNT(),  apiParams, login.getTicket(), printOutput);
			siteLock   = lock.lockIt(lock.LOCK(), lock.SITE(),     apiParams, login.getTicket(), printOutput);
			varLock    = lock.lockIt(lock.LOCK(), lock.VARIABLE(), apiParams, login.getTicket(), printOutput);
			
			// get, set and save data
			if (!APC_lock && acctLock && siteLock && varLock){
				
				if (oprChangeOfServiceTest.getData(apiParams,  login, printOutput)) {
					oprChangeOfServiceTest.setData(apiParams,  login, printOutput);
					oprChangeOfServiceTest.saveData(apiParams, login, printOutput);
				}
				else {
					printOutput.printToShell(apiParams, 
			 				 				 "\nError!: Customer status must be Active - aborting operation\n",
			 				                 null);
				}
			}
					
			// always unlock all
	 		if (acctLock || siteLock || varLock){lock.lockIt(lock.UNLOCK(), lock.ALL(), apiParams, login.getTicket(), printOutput);}
	 		
			// always logout
	 		login.logInOut(login.LOGOUT(), apiParams, printOutput);
		}
		
		// hold here until user closes output window
		while (!printOutput.shell.isDisposed()) {
			if (!printOutput.display.readAndDispatch()) printOutput.display.sleep(); 
		}
		
		//cleanup display and print files
		printOutput.finishOutput(apiParams, printOutput);
		
	} // end of main method
}
